local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/Beta.lua", true))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "ASTD ",
    SubTitle = "By Khoa",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "swords" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

local AutoCheck = Tabs.Main:AddToggle("AutoCheck", {
    Title = "Auto Check",
    Description = "Auto Check if you are in Infinite Mode",
    Default = false,
    Callback = function(value)
        if Options.AutoCheck and Options.AutoJoinInfinite then
            if value then
                local success, result = pcall(function()
                    return workspace.Map.Centre:GetChildren()[24]
                end)
                local map = workspace:FindFirstChild("Map")
                if success and result then
                    Options.AutoJoinInfinite:SetValue(true)
                elseif map and map:GetAttribute("MapName") == "Infinite" then
                    Fluent:Notify({
                        Title = "Notice",
                        Content = "Auto Join Infinite is in ghost mode in Infinite map.",
                        Duration = 5
                    })
                    Options.AutoJoinInfinite:SetValue(true) -- Keep on, but ghost
                else
                    Fluent:Notify({
                        Title = "Error",
                        Content = "Required map object not found!",
                        Duration = 5
                    })
                    Options.AutoJoinInfinite:SetValue(false)
                end

                if map and map:GetAttribute("MapName") == "Infinite" then
                    if Options.Normal and Options.Normal.Value then
                        local Players = game:GetService("Players")
                        local carryUsername = Options.CarryUsername and Options.CarryUsername.Value or ""
                        if carryUsername == "" then
                            Fluent:Notify({
                                Title = "Error",
                                Content = "Carry Username is empty!",
                                Duration = 5
                            })
                            return
                        end

                        local function getCarryUserId(username)
                            local success, result = pcall(function()
                                return Players:GetUserIdFromNameAsync(username)
                            end)
                            if success and result then
                                return tostring(result)
                            end
                            return nil
                        end

                        local carryUserId = getCarryUserId(carryUsername)
                        if not carryUserId then
                            Fluent:Notify({
                                Title = "Error",
                                Content = "Cannot get UserID for carry: " .. carryUsername,
                                Duration = 5
                            })
                            return
                        end

                        spawn(function()
                            while Options.AutoCheck.Value and Options.Normal.Value do
                                local playerFound = false
                                for _, player in ipairs(Players:GetPlayers()) do
                                    if tostring(player.UserId) == carryUserId then
                                        playerFound = true
                                        break
                                    end
                                end
                                if not playerFound then
                                    Fluent:Notify({
                                        Title = "Error",
                                        Content = "Carry user " .. carryUsername .. " not found in server. Exiting Roblox.",
                                        Duration = 5
                                    })
                                    game:Shutdown()
                                    break
                                end
                                wait(1)
                            end
                        end)
                    elseif Options.Carry and Options.Carry.Value then
                        local usernames = {
                            Options.Username1 and Options.Username1.Value or "",
                            Options.Username2 and Options.Username2.Value or "",
                            Options.Username3 and Options.Username3.Value or ""
                        }
                        if usernames[1] == "" or usernames[2] == "" or usernames[3] == "" then
                            Fluent:Notify({
                                Title = "Error",
                                Content = "Please fill Username 1, Username 2, and Username 3!",
                                Duration = 5
                            })
                            return
                        end

                        local function getUserId(username)
                            local success, result = pcall(function()
                                return game:GetService("Players"):GetUserIdFromNameAsync(username)
                            end)
                            if success and result then
                                return tostring(result)
                            end
                            return nil
                        end

                        local userIds = {}
                        for i, username in ipairs(usernames) do
                            userIds[i] = getUserId(username)
                            if not userIds[i] then
                                Fluent:Notify({
                                    Title = "Error",
                                    Content = "Cannot get UserID for: " .. username,
                                    Duration = 5
                                })
                                return
                            end
                        end

                        spawn(function()
                            while Options.AutoCheck.Value and Options.Carry.Value do
                                local allPresent = true
                                for i, userId in ipairs(userIds) do
                                    local playerFound = false
                                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                                        if tostring(player.UserId) == userId then
                                            playerFound = true
                                            break
                                        end
                                    end
                                    if not playerFound then
                                        allPresent = false
                                        Fluent:Notify({
                                            Title = "Error",
                                            Content = "User " .. usernames[i] .. " not found in server. Exiting Roblox.",
                                            Duration = 5
                                        })
                                        game:Shutdown()
                                        break
                                    end
                                end
                                if not allPresent then
                                    break
                                end
                                wait(1)
                            end
                        end)
                    end
                end
            end
        end
    end
})

local AccountOption = Tabs.Main:AddSection("Option [ Account ]")

local Carry = Tabs.Main:AddToggle("Carry", {
    Title = "Carry",
    Description = "This acc will be carry account",
    Default = false,
    Callback = function(value)
    end
})

local InfRoom = Tabs.Main:AddDropdown("InfRoom", {
    Title = "Inf Room",
    Description = "Select the Infinite Room",
    Values = {"1", "2", "3", "4", "5", "6", "7", "8"},
    Multi = false,
    Default = "1",
    Callback = function(Value)
        local roomPaths = {
            ["1"] = workspace.Map.Buildings.InfinitePods.StoryPod.room,
            ["2"] = workspace.Map.Buildings.InfinitePods:GetChildren()[2].room,
            ["3"] = workspace.Map.Buildings.InfinitePods:GetChildren()[3].room,
            ["4"] = workspace.Map.Buildings.InfinitePods:GetChildren()[4].room,
            ["5"] = workspace.Map.Buildings.InfinitePods:GetChildren()[5].room,
            ["6"] = workspace.Map.Buildings.InfinitePods:GetChildren()[6].room,
            ["7"] = workspace.Map.Buildings.InfinitePods:GetChildren()[7].room,
            ["8"] = workspace.Map.Buildings.InfinitePods:GetChildren()[8].room,
        }
    end
})

local Normal = Tabs.Main:AddToggle("Normal", {
    Title = "Normal",
    Description = "This acc will be will get carry by Carry account",
    Default = false,
    Callback = function(value)
    end
})

local Section = Tabs.Main:AddSection("Loop Check")

local AutoJoinInfinite = Tabs.Main:AddToggle("AutoJoinInfinite", {
    Title = "Auto Join Infinite",
    Description = "Auto Join Infinite Mode",
    Default = false,
    Callback = function(value)
        if Options.AutoJoinInfinite then
            if value then
                local Players = game:GetService("Players")
                local LocalPlayer = Players.LocalPlayer
                local carryUsername = Options.CarryUsername and Options.CarryUsername.Value or ""
                local stopTeleport = false
                local startTime = tick() -- Track start time for Normal mode timeout

                local roomPaths = {
                    ["1"] = workspace.Map.Buildings.InfinitePods:GetChildren()[8].room.room.floor,
                    ["2"] = workspace.Map.Buildings.InfinitePods.StoryPod.room.room.floor,
                    ["3"] = workspace.Map.Buildings.InfinitePods:GetChildren()[4].room.room.floor,
                    ["4"] = workspace.Map.Buildings.InfinitePods:GetChildren()[2].room.room.floor,
                    ["5"] = workspace.Map.Buildings.InfinitePods:GetChildren()[6].room.room.floor,
                    ["6"] = workspace.Map.Buildings.InfinitePods:GetChildren()[5].room.room.floor,
                    ["7"] = workspace.Map.Buildings.InfinitePods:GetChildren()[7].room.room.floor,
                    ["8"] = workspace.Map.Buildings.InfinitePods:GetChildren()[3].room.room.floor,
                }

                local InfinitePods = workspace:WaitForChild("Map"):WaitForChild("Buildings"):WaitForChild("InfinitePods")

                local function getCarryUserId(username)
                    local success, result = pcall(function()
                        return Players:GetUserIdFromNameAsync(username)
                    end)
                    if success and result then
                        return tostring(result)
                    end
                    return nil
                end

                local function checkPodsForCarry(carryUserId)
                    local pods = InfinitePods:GetChildren()
                    
                    for i = 2, 8 do
                        local pod = pods[i]
                        if pod then
                            local newLobby = pod:FindFirstChild("New Lobby")
                            if newLobby and newLobby:FindFirstChild(carryUserId) then
                                return true
                            end
                        end
                    end

                    local storyPod = InfinitePods:FindFirstChild("StoryPod")
                    if storyPod then
                        local newLobby = storyPod:FindFirstChild("New Lobby")
                        if newLobby and newLobby:FindFirstChild(carryUserId) then
                            return true
                        end
                    end

                    return false
                end

                local function checkPlayersInRadius()
                    if not Options.Carry.Value then return false end
                    local character = LocalPlayer.Character
                    if not character or not character:FindFirstChild("HumanoidRootPart") then
                        return false
                    end

                    local scanRadius = 10 -- Fixed radius of 10 studs
                    local rootPos = character.HumanoidRootPart.Position
                    local targetUsernames = {
                        Options.Username1.Value,
                        Options.Username2.Value,
                        Options.Username3.Value
                    }
                    local playersFound = 0

                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and table.find(targetUsernames, player.Name) then
                            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local distance = (player.Character.HumanoidRootPart.Position - rootPos).Magnitude
                                if distance <= scanRadius then
                                    playersFound = playersFound + 1
                                end
                            end
                        end
                    end

                    return playersFound >= 3
                end

                local function spamEAndEndStep()
                    local VirtualInputManager = game:GetService("VirtualInputManager")
                    spawn(function()
                        for i = 1, 10 do
                            VirtualInputManager:SendKeyEvent(true, "E", false, game)
                            wait(0.1)
                            VirtualInputManager:SendKeyEvent(false, "E", false, game)
                            wait(0.1)
                        end
                    end)
                    stopTeleport = true
                end

                local carryUserId = getCarryUserId(carryUsername)
                if carryUsername ~= "" and not carryUserId then
                    Fluent:Notify({
                        Title = "Error",
                        Content = "Cannot get UserID for carry: " .. carryUsername,
                        Duration = 5
                    })
                end

                local map = workspace:FindFirstChild("Map")
                if map and map:GetAttribute("MapName") == "Infinite" then
                    -- Ghost mode: Toggle stays on but does nothing
                    return
                end

                spawn(function()
                    while Options.AutoJoinInfinite.Value and not stopTeleport do
                        local selectedRoom = Options.InfRoom and Options.InfRoom.Value or "1"
                        local floorPart = roomPaths[selectedRoom]
                        
                        if floorPart and floorPart:IsA("BasePart") then
                            LocalPlayer.Character.HumanoidRootPart.CFrame = floorPart.CFrame + Vector3.new(0, 5, 0)
                        end

                        if Options.Carry.Value and checkPlayersInRadius() then
                            Fluent:Notify({
                                Title = "Team Status",
                                Content = "All 3 users found in radius. Sending E.",
                                Duration = 5
                            })
                            spamEAndEndStep()
                            break
                        elseif carryUserId and checkPodsForCarry(carryUserId) then
                            spamEAndEndStep()
                            break
                        end

                        -- Check for 5-minute timeout in Normal mode
                        if Options.Normal and Options.Normal.Value then
                            if tick() - startTime >= 300 then -- 5 minutes = 300 seconds
                                Fluent:Notify({
                                    Title = "Error",
                                    Content = "No carry signal detected within 5 minutes in Normal mode. Exiting Roblox.",
                                    Duration = 5
                                })
                                game:Shutdown()
                                break
                            end
                        end

                        wait(1)
                    end
                end)
            else
                stopTeleport = true
            end
        end
    end
})

local CarryUsername = Tabs.Main:AddInput("CarryUsername", {
    Title = "Carry Username",
    Description = "Enter your Carry Username",
    Default = "",
    Placeholder = "Enter Carry Username",
    Numeric = false,
    Finished = false,
    Callback = function(value)
    end
})

local Username1 = Tabs.Main:AddInput("Username1", {
    Title = "Username 1",
    Description = "Enter your Username 1",
    Default = "",
    Placeholder = "Enter Username 1",
    Numeric = false,
    Finished = false,
    Callback = function(value)
    end
})

local Username2 = Tabs.Main:AddInput("Username2", {
    Title = "Username 2",
    Description = "Enter your Username 2",
    Default = "",
    Placeholder = "Enter Username 2",
    Numeric = false,
    Finished = false,
    Callback = function(value)
    end
})

local Username3 = Tabs.Main:AddInput("Username3", {
    Title = "Username 3",
    Description = "Enter your Username 3",
    Default = "",
    Placeholder = "Enter Username 3",
    Numeric = false,
    Finished = false,
    Callback = function(value)
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Load config and activate AutoCheck first
spawn(function()
    wait(1) -- Delay to ensure interface is built
    SaveManager:LoadAutoloadConfig()
    if Options.AutoCheck then
        Options.AutoCheck:SetValue(true) -- Activate AutoCheck on load
    end
end)

Window:SelectTab(1)
